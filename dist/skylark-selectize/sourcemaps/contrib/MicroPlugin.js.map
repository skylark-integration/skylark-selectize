{"version":3,"sources":["contrib/MicroPlugin.js"],"names":["define","MicroPlugin","mixin","Interface","plugins","prototype","initializePlugins","i","n","key","queue","this","names","settings","requested","loaded","Array","isArray","length","push","name","options","hasOwnProperty","require","shift","loadPlugin","plugin","Error","fn","apply"],"mappings":";;;;;;;AAAAA,UAAU,WACT,IAAIC,GAEJC,MAAoB,SAASC,GAC5BA,EAAUC,WAiBVD,EAAUE,UAAUC,kBAAoB,SAASF,GAChD,IAAIG,EAAGC,EAAGC,EAENC,KASJ,GAVYC,KAGPP,SACJQ,SACAC,YACAC,aACAC,WAGGC,MAAMC,QAAQb,GACjB,IAAKG,EAAI,EAAGC,EAAIJ,EAAQc,OAAQX,EAAIC,EAAGD,IACZ,iBAAfH,EAAQG,GAClBG,EAAMS,KAAKf,EAAQG,KAbVI,KAeJP,QAAQS,SAAST,EAAQG,GAAGa,MAAQhB,EAAQG,GAAGc,QACpDX,EAAMS,KAAKf,EAAQG,GAAGa,YAGlB,GAAIhB,EACV,IAAKK,KAAOL,EACPA,EAAQkB,eAAeb,KArBjBE,KAsBJP,QAAQS,SAASJ,GAAOL,EAAQK,GACrCC,EAAMS,KAAKV,IAKd,KAAOC,EAAMQ,QA5BDP,KA6BNY,QAAQb,EAAMc,UAIrBrB,EAAUE,UAAUoB,WAAa,SAASL,GACzC,IACIhB,EADUO,KACKP,QACfsB,EAAUvB,EAAUC,QAAQgB,GAEhC,IAAKjB,EAAUC,QAAQkB,eAAeF,GACrC,MAAM,IAAIO,MAAM,mBAAsBP,EAAO,YAG9ChB,EAAQU,UAAUM,IAAQ,EAC1BhB,EAAQW,OAAOK,GAAQM,EAAOE,GAAGC,MATnBlB,MAAAA,KASqCP,QAAQS,SAASO,SACpEhB,EAAQQ,MAAMO,KAAKC,IAQpBjB,EAAUE,UAAUkB,QAAU,SAASH,GACtC,IACIhB,EADOO,KACQP,QAEnB,IAHWO,KAGDP,QAAQW,OAAOO,eAAeF,GAAO,CAC9C,GAAIhB,EAAQU,UAAUM,GACrB,MAAM,IAAIO,MAAM,oCAAsCP,EAAO,MALpDT,KAOLc,WAAWL,GAGjB,OAAOhB,EAAQW,OAAOK,IASvBjB,EAAUH,OAAS,SAASoB,EAAMQ,GACjCzB,EAAUC,QAAQgB,IACjBA,KAASA,EACTQ,GAASA,MAMZ,OAAO3B","file":"../../contrib/MicroPlugin.js","sourcesContent":["define([],function(){\r\n\tvar MicroPlugin = {};\r\n\r\n\tMicroPlugin.mixin = function(Interface) {\r\n\t\tInterface.plugins = {};\r\n\r\n\t\t/**\r\n\t\t * Initializes the listed plugins (with options).\r\n\t\t * Acceptable formats:\r\n\t\t *\r\n\t\t * List (without options):\r\n\t\t *   ['a', 'b', 'c']\r\n\t\t *\r\n\t\t * List (with options):\r\n\t\t *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]\r\n\t\t *\r\n\t\t * Hash (with options):\r\n\t\t *   {'a': { ... }, 'b': { ... }, 'c': { ... }}\r\n\t\t *\r\n\t\t * @param {mixed} plugins\r\n\t\t */\r\n\t\tInterface.prototype.initializePlugins = function(plugins) {\r\n\t\t\tvar i, n, key;\r\n\t\t\tvar self  = this;\r\n\t\t\tvar queue = [];\r\n\r\n\t\t\tself.plugins = {\r\n\t\t\t\tnames     : [],\r\n\t\t\t\tsettings  : {},\r\n\t\t\t\trequested : {},\r\n\t\t\t\tloaded    : {}\r\n\t\t\t};\r\n\r\n\t\t\tif (Array.isArray(plugins)) {\r\n\t\t\t\tfor (i = 0, n = plugins.length; i < n; i++) {\r\n\t\t\t\t\tif (typeof plugins[i] === 'string') {\r\n\t\t\t\t\t\tqueue.push(plugins[i]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tself.plugins.settings[plugins[i].name] = plugins[i].options;\r\n\t\t\t\t\t\tqueue.push(plugins[i].name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (plugins) {\r\n\t\t\t\tfor (key in plugins) {\r\n\t\t\t\t\tif (plugins.hasOwnProperty(key)) {\r\n\t\t\t\t\t\tself.plugins.settings[key] = plugins[key];\r\n\t\t\t\t\t\tqueue.push(key);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twhile (queue.length) {\r\n\t\t\t\tself.require(queue.shift());\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tInterface.prototype.loadPlugin = function(name) {\r\n\t\t\tvar self    = this;\r\n\t\t\tvar plugins = self.plugins;\r\n\t\t\tvar plugin  = Interface.plugins[name];\r\n\r\n\t\t\tif (!Interface.plugins.hasOwnProperty(name)) {\r\n\t\t\t\tthrow new Error('Unable to find \"' +  name + '\" plugin');\r\n\t\t\t}\r\n\r\n\t\t\tplugins.requested[name] = true;\r\n\t\t\tplugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);\r\n\t\t\tplugins.names.push(name);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Initializes a plugin.\r\n\t\t *\r\n\t\t * @param {string} name\r\n\t\t */\r\n\t\tInterface.prototype.require = function(name) {\r\n\t\t\tvar self = this;\r\n\t\t\tvar plugins = self.plugins;\r\n\r\n\t\t\tif (!self.plugins.loaded.hasOwnProperty(name)) {\r\n\t\t\t\tif (plugins.requested[name]) {\r\n\t\t\t\t\tthrow new Error('Plugin has circular dependency (\"' + name + '\")');\r\n\t\t\t\t}\r\n\t\t\t\tself.loadPlugin(name);\r\n\t\t\t}\r\n\r\n\t\t\treturn plugins.loaded[name];\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Registers a plugin.\r\n\t\t *\r\n\t\t * @param {string} name\r\n\t\t * @param {function} fn\r\n\t\t */\r\n\t\tInterface.define = function(name, fn) {\r\n\t\t\tInterface.plugins[name] = {\r\n\t\t\t\t'name' : name,\r\n\t\t\t\t'fn'   : fn\r\n\t\t\t};\r\n\t\t};\r\n\t};\r\n\r\n\r\n\treturn MicroPlugin;\r\n\t\r\n});"]}